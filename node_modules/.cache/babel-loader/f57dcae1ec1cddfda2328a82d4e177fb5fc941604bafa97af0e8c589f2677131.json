{"ast":null,"code":"// src/utils/rssFetcher.js\nimport{saveRoadAlerts,getRoadAlerts,isDataStale}from'./offlineStorage';// 冰島道路與安全相關的 RSS 源\nconst RSS_URLS={ROAD_CONDITIONS:'https://www.road.is/feeds/umferd',// 道路狀況和交通(需替換為真實可用的RSS feed)\nSAFETRAVEL:'https://safetravel.is/feeds/alerts'// 安全旅行警報(需替換為真實可用的RSS feed)\n};/**\r\n * 解析 XML 格式的 RSS 訂閱\r\n * @param {string} text - XML 文本\r\n * @returns {Object} - 解析後的數據\r\n */const parseRSS=text=>{try{const parser=new DOMParser();const xmlDoc=parser.parseFromString(text,\"text/xml\");const items=xmlDoc.querySelectorAll('item');const result=[];items.forEach(item=>{var _item$querySelector,_item$querySelector2,_item$querySelector3,_item$querySelector4,_item$querySelector5;const title=((_item$querySelector=item.querySelector('title'))===null||_item$querySelector===void 0?void 0:_item$querySelector.textContent)||'';const description=((_item$querySelector2=item.querySelector('description'))===null||_item$querySelector2===void 0?void 0:_item$querySelector2.textContent)||'';const pubDate=((_item$querySelector3=item.querySelector('pubDate'))===null||_item$querySelector3===void 0?void 0:_item$querySelector3.textContent)||'';const link=((_item$querySelector4=item.querySelector('link'))===null||_item$querySelector4===void 0?void 0:_item$querySelector4.textContent)||'';const guid=((_item$querySelector5=item.querySelector('guid'))===null||_item$querySelector5===void 0?void 0:_item$querySelector5.textContent)||'';// 提取特定的道路情報\nconst roadInfo=parseRoadInfo(title,description);result.push({id:guid||link||Date.now().toString(),title,description,pubDate:new Date(pubDate),link,...roadInfo});});return result;}catch(error){console.error('解析 RSS 失敗:',error);return[];}};/**\r\n * 從標題和描述中提取道路情報\r\n * @param {string} title - 警報標題\r\n * @param {string} description - 警報描述\r\n * @returns {Object} - 提取的道路情報\r\n */const parseRoadInfo=(title,description)=>{// 這個函數的實現取決於 RSS 源的具體格式\n// 下面是一個示例實現，可能需要根據實際 RSS 源調整\n// 道路標識符的模式 (例如：\"Route 1\", \"F-35\", 等)\nconst roadPattern=/(?:Route|Road|Highway|F-)\\s*\\d+/gi;// 狀態模式 (例如：開放，關閉，部分開放等)\nconst statusPattern=/(?:open|closed|partially open|caution|warning|alert)/gi;// 搜索標題和描述以提取道路信息\nconst roadMatches=(title+' '+description).match(roadPattern)||[];const statusMatches=(title+' '+description).match(statusPattern)||[];const road=roadMatches.length>0?roadMatches[0]:'';const status=statusMatches.length>0?statusMatches[0].toLowerCase():'';// 將狀態標準化\nlet normalizedStatus='unknown';if(status.includes('open')&&!status.includes('partially')){normalizedStatus='open';}else if(status.includes('closed')){normalizedStatus='closed';}else if(status.includes('partially')){normalizedStatus='partial';}else if(status.includes('caution')||status.includes('warning')||status.includes('alert')){normalizedStatus='caution';}return{road,status:normalizedStatus,statusOriginal:status};};/**\r\n * 獲取道路警報\r\n * @param {boolean} forceRefresh - 是否強制刷新\r\n * @returns {Promise<Array>} - 道路警報列表\r\n */export const fetchRoadAlerts=async function(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;try{// 如果不是強制刷新，且數據不過期，則使用本地存儲的數據\nif(!forceRefresh&&!isDataStale(6)){// 6小時有效期\nconst cachedAlerts=getRoadAlerts();if(cachedAlerts&&cachedAlerts.length>0){console.log('使用緩存的道路警報數據');return cachedAlerts;}}// 如果沒有可用的緩存或需要刷新，則獲取新數據\nconsole.log('獲取最新道路警報');// 嘗試從所有 RSS 源獲取數據\nconst responses=await Promise.allSettled([fetch(RSS_URLS.ROAD_CONDITIONS).then(res=>res.text()),fetch(RSS_URLS.SAFETRAVEL).then(res=>res.text())]);let allAlerts=[];// 處理成功的響應\nresponses.forEach((result,index)=>{if(result.status==='fulfilled'){const source=Object.keys(RSS_URLS)[index];const alerts=parseRSS(result.value);// 添加來源標識\nalerts.forEach(alert=>{alert.source=source;});allAlerts=[...allAlerts,...alerts];}});// 按發布日期排序 (最新的優先)\nallAlerts.sort((a,b)=>new Date(b.pubDate)-new Date(a.pubDate));// 過濾掉重複項\nconst uniqueAlerts=allAlerts.filter((alert,index,self)=>index===self.findIndex(a=>a.id===alert.id));// 保存到本地存儲\nif(uniqueAlerts.length>0){saveRoadAlerts(uniqueAlerts);}return uniqueAlerts;}catch(error){console.error('獲取道路警報失敗:',error);// 如果發生錯誤，嘗試使用本地存儲的數據\nconst cachedAlerts=getRoadAlerts();return cachedAlerts||[];}};/**\r\n * 獲取特定道路的警報\r\n * @param {string} roadId - 道路標識符，如 \"Route 1\"\r\n * @returns {Promise<Array>} - 該道路的警報列表\r\n */export const fetchAlertsForRoad=async roadId=>{try{const allAlerts=await fetchRoadAlerts();return allAlerts.filter(alert=>alert.road.toLowerCase().includes(roadId.toLowerCase()));}catch(error){console.error(`獲取道路 ${roadId} 的警報失敗:`,error);return[];}};/**\r\n * 將警報嚴重性轉換為UI顯示格式\r\n * @param {string} status - 警報狀態\r\n * @returns {Object} - UI顯示屬性\r\n */export const getAlertSeverityUI=status=>{switch(status){case'closed':return{color:'red',icon:'alert-circle',label:'關閉'};case'partial':return{color:'orange',icon:'alert-triangle',label:'部分開放'};case'caution':return{color:'yellow',icon:'alert-triangle',label:'注意'};case'open':return{color:'green',icon:'check-circle',label:'開放'};default:return{color:'gray',icon:'help-circle',label:'未知'};}};","map":{"version":3,"names":["saveRoadAlerts","getRoadAlerts","isDataStale","RSS_URLS","ROAD_CONDITIONS","SAFETRAVEL","parseRSS","text","parser","DOMParser","xmlDoc","parseFromString","items","querySelectorAll","result","forEach","item","_item$querySelector","_item$querySelector2","_item$querySelector3","_item$querySelector4","_item$querySelector5","title","querySelector","textContent","description","pubDate","link","guid","roadInfo","parseRoadInfo","push","id","Date","now","toString","error","console","roadPattern","statusPattern","roadMatches","match","statusMatches","road","length","status","toLowerCase","normalizedStatus","includes","statusOriginal","fetchRoadAlerts","forceRefresh","arguments","undefined","cachedAlerts","log","responses","Promise","allSettled","fetch","then","res","allAlerts","index","source","Object","keys","alerts","value","alert","sort","a","b","uniqueAlerts","filter","self","findIndex","fetchAlertsForRoad","roadId","getAlertSeverityUI","color","icon","label"],"sources":["C:/Users/wesle/OneDrive - KU Leuven/Desktop/Iceland/my-iceland-trip-website/src/utils/rssFetcher.js"],"sourcesContent":["// src/utils/rssFetcher.js\r\nimport { saveRoadAlerts, getRoadAlerts, isDataStale } from './offlineStorage';\r\n\r\n// 冰島道路與安全相關的 RSS 源\r\nconst RSS_URLS = {\r\n  ROAD_CONDITIONS: 'https://www.road.is/feeds/umferd', // 道路狀況和交通(需替換為真實可用的RSS feed)\r\n  SAFETRAVEL: 'https://safetravel.is/feeds/alerts' // 安全旅行警報(需替換為真實可用的RSS feed)\r\n};\r\n\r\n/**\r\n * 解析 XML 格式的 RSS 訂閱\r\n * @param {string} text - XML 文本\r\n * @returns {Object} - 解析後的數據\r\n */\r\nconst parseRSS = (text) => {\r\n  try {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(text, \"text/xml\");\r\n    \r\n    const items = xmlDoc.querySelectorAll('item');\r\n    const result = [];\r\n    \r\n    items.forEach((item) => {\r\n      const title = item.querySelector('title')?.textContent || '';\r\n      const description = item.querySelector('description')?.textContent || '';\r\n      const pubDate = item.querySelector('pubDate')?.textContent || '';\r\n      const link = item.querySelector('link')?.textContent || '';\r\n      const guid = item.querySelector('guid')?.textContent || '';\r\n      \r\n      // 提取特定的道路情報\r\n      const roadInfo = parseRoadInfo(title, description);\r\n      \r\n      result.push({\r\n        id: guid || link || Date.now().toString(),\r\n        title,\r\n        description,\r\n        pubDate: new Date(pubDate),\r\n        link,\r\n        ...roadInfo\r\n      });\r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('解析 RSS 失敗:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * 從標題和描述中提取道路情報\r\n * @param {string} title - 警報標題\r\n * @param {string} description - 警報描述\r\n * @returns {Object} - 提取的道路情報\r\n */\r\nconst parseRoadInfo = (title, description) => {\r\n  // 這個函數的實現取決於 RSS 源的具體格式\r\n  // 下面是一個示例實現，可能需要根據實際 RSS 源調整\r\n  \r\n  // 道路標識符的模式 (例如：\"Route 1\", \"F-35\", 等)\r\n  const roadPattern = /(?:Route|Road|Highway|F-)\\s*\\d+/gi;\r\n  \r\n  // 狀態模式 (例如：開放，關閉，部分開放等)\r\n  const statusPattern = /(?:open|closed|partially open|caution|warning|alert)/gi;\r\n\r\n  // 搜索標題和描述以提取道路信息\r\n  const roadMatches = (title + ' ' + description).match(roadPattern) || [];\r\n  const statusMatches = (title + ' ' + description).match(statusPattern) || [];\r\n  \r\n  const road = roadMatches.length > 0 ? roadMatches[0] : '';\r\n  const status = statusMatches.length > 0 ? statusMatches[0].toLowerCase() : '';\r\n  \r\n  // 將狀態標準化\r\n  let normalizedStatus = 'unknown';\r\n  if (status.includes('open') && !status.includes('partially')) {\r\n    normalizedStatus = 'open';\r\n  } else if (status.includes('closed')) {\r\n    normalizedStatus = 'closed';\r\n  } else if (status.includes('partially')) {\r\n    normalizedStatus = 'partial';\r\n  } else if (status.includes('caution') || status.includes('warning') || status.includes('alert')) {\r\n    normalizedStatus = 'caution';\r\n  }\r\n  \r\n  return {\r\n    road,\r\n    status: normalizedStatus,\r\n    statusOriginal: status\r\n  };\r\n};\r\n\r\n/**\r\n * 獲取道路警報\r\n * @param {boolean} forceRefresh - 是否強制刷新\r\n * @returns {Promise<Array>} - 道路警報列表\r\n */\r\nexport const fetchRoadAlerts = async (forceRefresh = false) => {\r\n  try {\r\n    // 如果不是強制刷新，且數據不過期，則使用本地存儲的數據\r\n    if (!forceRefresh && !isDataStale(6)) { // 6小時有效期\r\n      const cachedAlerts = getRoadAlerts();\r\n      if (cachedAlerts && cachedAlerts.length > 0) {\r\n        console.log('使用緩存的道路警報數據');\r\n        return cachedAlerts;\r\n      }\r\n    }\r\n    \r\n    // 如果沒有可用的緩存或需要刷新，則獲取新數據\r\n    console.log('獲取最新道路警報');\r\n    \r\n    // 嘗試從所有 RSS 源獲取數據\r\n    const responses = await Promise.allSettled([\r\n      fetch(RSS_URLS.ROAD_CONDITIONS).then(res => res.text()),\r\n      fetch(RSS_URLS.SAFETRAVEL).then(res => res.text())\r\n    ]);\r\n    \r\n    let allAlerts = [];\r\n    \r\n    // 處理成功的響應\r\n    responses.forEach((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        const source = Object.keys(RSS_URLS)[index];\r\n        const alerts = parseRSS(result.value);\r\n        \r\n        // 添加來源標識\r\n        alerts.forEach(alert => {\r\n          alert.source = source;\r\n        });\r\n        \r\n        allAlerts = [...allAlerts, ...alerts];\r\n      }\r\n    });\r\n    \r\n    // 按發布日期排序 (最新的優先)\r\n    allAlerts.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));\r\n    \r\n    // 過濾掉重複項\r\n    const uniqueAlerts = allAlerts.filter((alert, index, self) => \r\n      index === self.findIndex(a => a.id === alert.id)\r\n    );\r\n    \r\n    // 保存到本地存儲\r\n    if (uniqueAlerts.length > 0) {\r\n      saveRoadAlerts(uniqueAlerts);\r\n    }\r\n    \r\n    return uniqueAlerts;\r\n  } catch (error) {\r\n    console.error('獲取道路警報失敗:', error);\r\n    \r\n    // 如果發生錯誤，嘗試使用本地存儲的數據\r\n    const cachedAlerts = getRoadAlerts();\r\n    return cachedAlerts || [];\r\n  }\r\n};\r\n\r\n/**\r\n * 獲取特定道路的警報\r\n * @param {string} roadId - 道路標識符，如 \"Route 1\"\r\n * @returns {Promise<Array>} - 該道路的警報列表\r\n */\r\nexport const fetchAlertsForRoad = async (roadId) => {\r\n  try {\r\n    const allAlerts = await fetchRoadAlerts();\r\n    return allAlerts.filter(alert => \r\n      alert.road.toLowerCase().includes(roadId.toLowerCase())\r\n    );\r\n  } catch (error) {\r\n    console.error(`獲取道路 ${roadId} 的警報失敗:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * 將警報嚴重性轉換為UI顯示格式\r\n * @param {string} status - 警報狀態\r\n * @returns {Object} - UI顯示屬性\r\n */\r\nexport const getAlertSeverityUI = (status) => {\r\n  switch (status) {\r\n    case 'closed':\r\n      return {\r\n        color: 'red',\r\n        icon: 'alert-circle',\r\n        label: '關閉'\r\n      };\r\n    case 'partial':\r\n      return {\r\n        color: 'orange',\r\n        icon: 'alert-triangle',\r\n        label: '部分開放'\r\n      };\r\n    case 'caution':\r\n      return {\r\n        color: 'yellow',\r\n        icon: 'alert-triangle',\r\n        label: '注意'\r\n      };\r\n    case 'open':\r\n      return {\r\n        color: 'green',\r\n        icon: 'check-circle',\r\n        label: '開放'\r\n      };\r\n    default:\r\n      return {\r\n        color: 'gray',\r\n        icon: 'help-circle',\r\n        label: '未知'\r\n      };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}