{"ast":null,"code":"// src/utils/rssFetcher.js\nimport { saveRoadAlerts, getRoadAlerts, isDataStale } from './offlineStorage';\n\n// 冰島道路與安全相關的 RSS 源\nconst RSS_URLS = {\n  ROAD_CONDITIONS: 'https://www.road.is/feeds/umferd',\n  // 道路狀況和交通(需替換為真實可用的RSS feed)\n  SAFETRAVEL: 'https://safetravel.is/feeds/alerts' // 安全旅行警報(需替換為真實可用的RSS feed)\n};\n\n/**\r\n * 解析 XML 格式的 RSS 訂閱\r\n * @param {string} text - XML 文本\r\n * @returns {Object} - 解析後的數據\r\n */\nconst parseRSS = text => {\n  try {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(text, \"text/xml\");\n    const items = xmlDoc.querySelectorAll('item');\n    const result = [];\n    items.forEach(item => {\n      var _item$querySelector, _item$querySelector2, _item$querySelector3, _item$querySelector4, _item$querySelector5;\n      const title = ((_item$querySelector = item.querySelector('title')) === null || _item$querySelector === void 0 ? void 0 : _item$querySelector.textContent) || '';\n      const description = ((_item$querySelector2 = item.querySelector('description')) === null || _item$querySelector2 === void 0 ? void 0 : _item$querySelector2.textContent) || '';\n      const pubDate = ((_item$querySelector3 = item.querySelector('pubDate')) === null || _item$querySelector3 === void 0 ? void 0 : _item$querySelector3.textContent) || '';\n      const link = ((_item$querySelector4 = item.querySelector('link')) === null || _item$querySelector4 === void 0 ? void 0 : _item$querySelector4.textContent) || '';\n      const guid = ((_item$querySelector5 = item.querySelector('guid')) === null || _item$querySelector5 === void 0 ? void 0 : _item$querySelector5.textContent) || '';\n\n      // 提取特定的道路情報\n      const roadInfo = parseRoadInfo(title, description);\n      result.push({\n        id: guid || link || Date.now().toString(),\n        title,\n        description,\n        pubDate: new Date(pubDate),\n        link,\n        ...roadInfo\n      });\n    });\n    return result;\n  } catch (error) {\n    console.error('解析 RSS 失敗:', error);\n    return [];\n  }\n};\n\n/**\r\n * 從標題和描述中提取道路情報\r\n * @param {string} title - 警報標題\r\n * @param {string} description - 警報描述\r\n * @returns {Object} - 提取的道路情報\r\n */\nconst parseRoadInfo = (title, description) => {\n  // 這個函數的實現取決於 RSS 源的具體格式\n  // 下面是一個示例實現，可能需要根據實際 RSS 源調整\n\n  // 道路標識符的模式 (例如：\"Route 1\", \"F-35\", 等)\n  const roadPattern = /(?:Route|Road|Highway|F-)\\s*\\d+/gi;\n\n  // 狀態模式 (例如：開放，關閉，部分開放等)\n  const statusPattern = /(?:open|closed|partially open|caution|warning|alert)/gi;\n\n  // 搜索標題和描述以提取道路信息\n  const roadMatches = (title + ' ' + description).match(roadPattern) || [];\n  const statusMatches = (title + ' ' + description).match(statusPattern) || [];\n  const road = roadMatches.length > 0 ? roadMatches[0] : '';\n  const status = statusMatches.length > 0 ? statusMatches[0].toLowerCase() : '';\n\n  // 將狀態標準化\n  let normalizedStatus = 'unknown';\n  if (status.includes('open') && !status.includes('partially')) {\n    normalizedStatus = 'open';\n  } else if (status.includes('closed')) {\n    normalizedStatus = 'closed';\n  } else if (status.includes('partially')) {\n    normalizedStatus = 'partial';\n  } else if (status.includes('caution') || status.includes('warning') || status.includes('alert')) {\n    normalizedStatus = 'caution';\n  }\n  return {\n    road,\n    status: normalizedStatus,\n    statusOriginal: status\n  };\n};\n\n/**\r\n * 獲取道路警報\r\n * @param {boolean} forceRefresh - 是否強制刷新\r\n * @returns {Promise<Array>} - 道路警報列表\r\n */\nexport const fetchRoadAlerts = async (forceRefresh = false) => {\n  try {\n    // 如果不是強制刷新，且數據不過期，則使用本地存儲的數據\n    if (!forceRefresh && !isDataStale(6)) {\n      // 6小時有效期\n      const cachedAlerts = getRoadAlerts();\n      if (cachedAlerts && cachedAlerts.length > 0) {\n        console.log('使用緩存的道路警報數據');\n        return cachedAlerts;\n      }\n    }\n\n    // 如果沒有可用的緩存或需要刷新，則獲取新數據\n    console.log('獲取最新道路警報');\n\n    // 嘗試從所有 RSS 源獲取數據\n    const responses = await Promise.allSettled([fetch(RSS_URLS.ROAD_CONDITIONS).then(res => res.text()), fetch(RSS_URLS.SAFETRAVEL).then(res => res.text())]);\n    let allAlerts = [];\n\n    // 處理成功的響應\n    responses.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        const source = Object.keys(RSS_URLS)[index];\n        const alerts = parseRSS(result.value);\n\n        // 添加來源標識\n        alerts.forEach(alert => {\n          alert.source = source;\n        });\n        allAlerts = [...allAlerts, ...alerts];\n      }\n    });\n\n    // 按發布日期排序 (最新的優先)\n    allAlerts.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));\n\n    // 過濾掉重複項\n    const uniqueAlerts = allAlerts.filter((alert, index, self) => index === self.findIndex(a => a.id === alert.id));\n\n    // 保存到本地存儲\n    if (uniqueAlerts.length > 0) {\n      saveRoadAlerts(uniqueAlerts);\n    }\n    return uniqueAlerts;\n  } catch (error) {\n    console.error('獲取道路警報失敗:', error);\n\n    // 如果發生錯誤，嘗試使用本地存儲的數據\n    const cachedAlerts = getRoadAlerts();\n    return cachedAlerts || [];\n  }\n};\n\n/**\r\n * 獲取特定道路的警報\r\n * @param {string} roadId - 道路標識符，如 \"Route 1\"\r\n * @returns {Promise<Array>} - 該道路的警報列表\r\n */\nexport const fetchAlertsForRoad = async roadId => {\n  try {\n    const allAlerts = await fetchRoadAlerts();\n    return allAlerts.filter(alert => alert.road.toLowerCase().includes(roadId.toLowerCase()));\n  } catch (error) {\n    console.error(`獲取道路 ${roadId} 的警報失敗:`, error);\n    return [];\n  }\n};\n\n/**\r\n * 將警報嚴重性轉換為UI顯示格式\r\n * @param {string} status - 警報狀態\r\n * @returns {Object} - UI顯示屬性\r\n */\nexport const getAlertSeverityUI = status => {\n  switch (status) {\n    case 'closed':\n      return {\n        color: 'red',\n        icon: 'alert-circle',\n        label: '關閉'\n      };\n    case 'partial':\n      return {\n        color: 'orange',\n        icon: 'alert-triangle',\n        label: '部分開放'\n      };\n    case 'caution':\n      return {\n        color: 'yellow',\n        icon: 'alert-triangle',\n        label: '注意'\n      };\n    case 'open':\n      return {\n        color: 'green',\n        icon: 'check-circle',\n        label: '開放'\n      };\n    default:\n      return {\n        color: 'gray',\n        icon: 'help-circle',\n        label: '未知'\n      };\n  }\n};","map":{"version":3,"names":["saveRoadAlerts","getRoadAlerts","isDataStale","RSS_URLS","ROAD_CONDITIONS","SAFETRAVEL","parseRSS","text","parser","DOMParser","xmlDoc","parseFromString","items","querySelectorAll","result","forEach","item","_item$querySelector","_item$querySelector2","_item$querySelector3","_item$querySelector4","_item$querySelector5","title","querySelector","textContent","description","pubDate","link","guid","roadInfo","parseRoadInfo","push","id","Date","now","toString","error","console","roadPattern","statusPattern","roadMatches","match","statusMatches","road","length","status","toLowerCase","normalizedStatus","includes","statusOriginal","fetchRoadAlerts","forceRefresh","cachedAlerts","log","responses","Promise","allSettled","fetch","then","res","allAlerts","index","source","Object","keys","alerts","value","alert","sort","a","b","uniqueAlerts","filter","self","findIndex","fetchAlertsForRoad","roadId","getAlertSeverityUI","color","icon","label"],"sources":["C:/Users/wesle/OneDrive - KU Leuven/Desktop/Iceland/my-iceland-trip-website/src/utils/rssFetcher.js"],"sourcesContent":["// src/utils/rssFetcher.js\r\nimport { saveRoadAlerts, getRoadAlerts, isDataStale } from './offlineStorage';\r\n\r\n// 冰島道路與安全相關的 RSS 源\r\nconst RSS_URLS = {\r\n  ROAD_CONDITIONS: 'https://www.road.is/feeds/umferd', // 道路狀況和交通(需替換為真實可用的RSS feed)\r\n  SAFETRAVEL: 'https://safetravel.is/feeds/alerts' // 安全旅行警報(需替換為真實可用的RSS feed)\r\n};\r\n\r\n/**\r\n * 解析 XML 格式的 RSS 訂閱\r\n * @param {string} text - XML 文本\r\n * @returns {Object} - 解析後的數據\r\n */\r\nconst parseRSS = (text) => {\r\n  try {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(text, \"text/xml\");\r\n    \r\n    const items = xmlDoc.querySelectorAll('item');\r\n    const result = [];\r\n    \r\n    items.forEach((item) => {\r\n      const title = item.querySelector('title')?.textContent || '';\r\n      const description = item.querySelector('description')?.textContent || '';\r\n      const pubDate = item.querySelector('pubDate')?.textContent || '';\r\n      const link = item.querySelector('link')?.textContent || '';\r\n      const guid = item.querySelector('guid')?.textContent || '';\r\n      \r\n      // 提取特定的道路情報\r\n      const roadInfo = parseRoadInfo(title, description);\r\n      \r\n      result.push({\r\n        id: guid || link || Date.now().toString(),\r\n        title,\r\n        description,\r\n        pubDate: new Date(pubDate),\r\n        link,\r\n        ...roadInfo\r\n      });\r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('解析 RSS 失敗:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * 從標題和描述中提取道路情報\r\n * @param {string} title - 警報標題\r\n * @param {string} description - 警報描述\r\n * @returns {Object} - 提取的道路情報\r\n */\r\nconst parseRoadInfo = (title, description) => {\r\n  // 這個函數的實現取決於 RSS 源的具體格式\r\n  // 下面是一個示例實現，可能需要根據實際 RSS 源調整\r\n  \r\n  // 道路標識符的模式 (例如：\"Route 1\", \"F-35\", 等)\r\n  const roadPattern = /(?:Route|Road|Highway|F-)\\s*\\d+/gi;\r\n  \r\n  // 狀態模式 (例如：開放，關閉，部分開放等)\r\n  const statusPattern = /(?:open|closed|partially open|caution|warning|alert)/gi;\r\n\r\n  // 搜索標題和描述以提取道路信息\r\n  const roadMatches = (title + ' ' + description).match(roadPattern) || [];\r\n  const statusMatches = (title + ' ' + description).match(statusPattern) || [];\r\n  \r\n  const road = roadMatches.length > 0 ? roadMatches[0] : '';\r\n  const status = statusMatches.length > 0 ? statusMatches[0].toLowerCase() : '';\r\n  \r\n  // 將狀態標準化\r\n  let normalizedStatus = 'unknown';\r\n  if (status.includes('open') && !status.includes('partially')) {\r\n    normalizedStatus = 'open';\r\n  } else if (status.includes('closed')) {\r\n    normalizedStatus = 'closed';\r\n  } else if (status.includes('partially')) {\r\n    normalizedStatus = 'partial';\r\n  } else if (status.includes('caution') || status.includes('warning') || status.includes('alert')) {\r\n    normalizedStatus = 'caution';\r\n  }\r\n  \r\n  return {\r\n    road,\r\n    status: normalizedStatus,\r\n    statusOriginal: status\r\n  };\r\n};\r\n\r\n/**\r\n * 獲取道路警報\r\n * @param {boolean} forceRefresh - 是否強制刷新\r\n * @returns {Promise<Array>} - 道路警報列表\r\n */\r\nexport const fetchRoadAlerts = async (forceRefresh = false) => {\r\n  try {\r\n    // 如果不是強制刷新，且數據不過期，則使用本地存儲的數據\r\n    if (!forceRefresh && !isDataStale(6)) { // 6小時有效期\r\n      const cachedAlerts = getRoadAlerts();\r\n      if (cachedAlerts && cachedAlerts.length > 0) {\r\n        console.log('使用緩存的道路警報數據');\r\n        return cachedAlerts;\r\n      }\r\n    }\r\n    \r\n    // 如果沒有可用的緩存或需要刷新，則獲取新數據\r\n    console.log('獲取最新道路警報');\r\n    \r\n    // 嘗試從所有 RSS 源獲取數據\r\n    const responses = await Promise.allSettled([\r\n      fetch(RSS_URLS.ROAD_CONDITIONS).then(res => res.text()),\r\n      fetch(RSS_URLS.SAFETRAVEL).then(res => res.text())\r\n    ]);\r\n    \r\n    let allAlerts = [];\r\n    \r\n    // 處理成功的響應\r\n    responses.forEach((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        const source = Object.keys(RSS_URLS)[index];\r\n        const alerts = parseRSS(result.value);\r\n        \r\n        // 添加來源標識\r\n        alerts.forEach(alert => {\r\n          alert.source = source;\r\n        });\r\n        \r\n        allAlerts = [...allAlerts, ...alerts];\r\n      }\r\n    });\r\n    \r\n    // 按發布日期排序 (最新的優先)\r\n    allAlerts.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));\r\n    \r\n    // 過濾掉重複項\r\n    const uniqueAlerts = allAlerts.filter((alert, index, self) => \r\n      index === self.findIndex(a => a.id === alert.id)\r\n    );\r\n    \r\n    // 保存到本地存儲\r\n    if (uniqueAlerts.length > 0) {\r\n      saveRoadAlerts(uniqueAlerts);\r\n    }\r\n    \r\n    return uniqueAlerts;\r\n  } catch (error) {\r\n    console.error('獲取道路警報失敗:', error);\r\n    \r\n    // 如果發生錯誤，嘗試使用本地存儲的數據\r\n    const cachedAlerts = getRoadAlerts();\r\n    return cachedAlerts || [];\r\n  }\r\n};\r\n\r\n/**\r\n * 獲取特定道路的警報\r\n * @param {string} roadId - 道路標識符，如 \"Route 1\"\r\n * @returns {Promise<Array>} - 該道路的警報列表\r\n */\r\nexport const fetchAlertsForRoad = async (roadId) => {\r\n  try {\r\n    const allAlerts = await fetchRoadAlerts();\r\n    return allAlerts.filter(alert => \r\n      alert.road.toLowerCase().includes(roadId.toLowerCase())\r\n    );\r\n  } catch (error) {\r\n    console.error(`獲取道路 ${roadId} 的警報失敗:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * 將警報嚴重性轉換為UI顯示格式\r\n * @param {string} status - 警報狀態\r\n * @returns {Object} - UI顯示屬性\r\n */\r\nexport const getAlertSeverityUI = (status) => {\r\n  switch (status) {\r\n    case 'closed':\r\n      return {\r\n        color: 'red',\r\n        icon: 'alert-circle',\r\n        label: '關閉'\r\n      };\r\n    case 'partial':\r\n      return {\r\n        color: 'orange',\r\n        icon: 'alert-triangle',\r\n        label: '部分開放'\r\n      };\r\n    case 'caution':\r\n      return {\r\n        color: 'yellow',\r\n        icon: 'alert-triangle',\r\n        label: '注意'\r\n      };\r\n    case 'open':\r\n      return {\r\n        color: 'green',\r\n        icon: 'check-circle',\r\n        label: '開放'\r\n      };\r\n    default:\r\n      return {\r\n        color: 'gray',\r\n        icon: 'help-circle',\r\n        label: '未知'\r\n      };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}