{"ast":null,"code":"// src/registerServiceWorker.js\nexport function register() {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      // 註冊服務工作者\n      navigator.serviceWorker.register(swUrl).then(registration => {\n        console.log('ServiceWorker registration successful with scope: ', registration.scope);\n\n        // 檢查更新\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // 在這裡，有新版本的服務工作者可用\n                console.log('New content is available and will be used when all tabs for this page are closed.');\n\n                // 可選：通知用戶有更新\n                if (window.confirm('應用有新版本可用。重新加載以更新？')) {\n                  window.location.reload();\n                }\n              } else {\n                // 在這裡，所有內容已成功預先緩存\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      }).catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n\n      // 檢查是否支持後台同步\n      if ('SyncManager' in window) {\n        navigator.serviceWorker.ready.then(registration => {\n          // 註冊後台同步任務\n          registration.sync.register('sync-data').catch(err => console.log('Background sync registration failed:', err));\n        });\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n\n// 檢查網絡連接狀態\nexport function checkNetworkStatus() {\n  const updateNetworkStatus = () => {\n    const isOnline = navigator.onLine;\n    // 派發事件\n    window.dispatchEvent(new CustomEvent('network-status-change', {\n      detail: {\n        isOnline\n      }\n    }));\n    if (isOnline) {\n      console.log('🌐 連接到網絡');\n    } else {\n      console.log('🔌 離線模式');\n    }\n  };\n\n  // 初始檢查\n  updateNetworkStatus();\n\n  // 監聽在線/離線狀態變化\n  window.addEventListener('online', updateNetworkStatus);\n  window.addEventListener('offline', updateNetworkStatus);\n  return () => {\n    window.removeEventListener('online', updateNetworkStatus);\n    window.removeEventListener('offline', updateNetworkStatus);\n  };\n}","map":{"version":3,"names":["register","navigator","window","addEventListener","swUrl","process","env","PUBLIC_URL","serviceWorker","then","registration","console","log","scope","onupdatefound","installingWorker","installing","onstatechange","state","controller","confirm","location","reload","catch","error","ready","sync","err","unregister","message","checkNetworkStatus","updateNetworkStatus","isOnline","onLine","dispatchEvent","CustomEvent","detail","removeEventListener"],"sources":["C:/Users/wesle/OneDrive - KU Leuven/Desktop/Iceland/my-iceland-trip-website/src/registerServiceWorker.js"],"sourcesContent":["// src/registerServiceWorker.js\r\nexport function register() {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      \r\n      // 註冊服務工作者\r\n      navigator.serviceWorker.register(swUrl)\r\n        .then(registration => {\r\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n          \r\n          // 檢查更新\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            if (installingWorker == null) {\r\n              return;\r\n            }\r\n            \r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // 在這裡，有新版本的服務工作者可用\r\n                  console.log('New content is available and will be used when all tabs for this page are closed.');\r\n                  \r\n                  // 可選：通知用戶有更新\r\n                  if (window.confirm('應用有新版本可用。重新加載以更新？')) {\r\n                    window.location.reload();\r\n                  }\r\n                } else {\r\n                  // 在這裡，所有內容已成功預先緩存\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n      \r\n      // 檢查是否支持後台同步\r\n      if ('SyncManager' in window) {\r\n        navigator.serviceWorker.ready\r\n          .then(registration => {\r\n            // 註冊後台同步任務\r\n            registration.sync.register('sync-data')\r\n              .catch(err => console.log('Background sync registration failed:', err));\r\n          });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n\r\n// 檢查網絡連接狀態\r\nexport function checkNetworkStatus() {\r\n  const updateNetworkStatus = () => {\r\n    const isOnline = navigator.onLine;\r\n    // 派發事件\r\n    window.dispatchEvent(new CustomEvent('network-status-change', { detail: { isOnline } }));\r\n    \r\n    if (isOnline) {\r\n      console.log('🌐 連接到網絡');\r\n    } else {\r\n      console.log('🔌 離線模式');\r\n    }\r\n  };\r\n  \r\n  // 初始檢查\r\n  updateNetworkStatus();\r\n  \r\n  // 監聽在線/離線狀態變化\r\n  window.addEventListener('online', updateNetworkStatus);\r\n  window.addEventListener('offline', updateNetworkStatus);\r\n  \r\n  return () => {\r\n    window.removeEventListener('online', updateNetworkStatus);\r\n    window.removeEventListener('offline', updateNetworkStatus);\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}