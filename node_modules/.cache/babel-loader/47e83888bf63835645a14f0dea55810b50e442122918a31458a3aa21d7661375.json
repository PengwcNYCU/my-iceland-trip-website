{"ast":null,"code":"// src/registerServiceWorker.js\nexport function register(){if('serviceWorker'in navigator){window.addEventListener('load',()=>{const swUrl=`${process.env.PUBLIC_URL}/service-worker.js`;// 註冊服務工作者\nnavigator.serviceWorker.register(swUrl).then(registration=>{console.log('ServiceWorker registration successful with scope: ',registration.scope);// 檢查更新\nregistration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=()=>{if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// 在這裡，有新版本的服務工作者可用\nconsole.log('New content is available and will be used when all tabs for this page are closed.');// 可選：通知用戶有更新\nif(window.confirm('應用有新版本可用。重新加載以更新？')){window.location.reload();}}else{// 在這裡，所有內容已成功預先緩存\nconsole.log('Content is cached for offline use.');}}};};}).catch(error=>{console.error('Error during service worker registration:',error);});// 檢查是否支持後台同步\nif('SyncManager'in window){navigator.serviceWorker.ready.then(registration=>{// 註冊後台同步任務\nregistration.sync.register('sync-data').catch(err=>console.log('Background sync registration failed:',err));});}});}}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();}).catch(error=>{console.error(error.message);});}}// 檢查網絡連接狀態\nexport function checkNetworkStatus(){const updateNetworkStatus=()=>{const isOnline=navigator.onLine;// 派發事件\nwindow.dispatchEvent(new CustomEvent('network-status-change',{detail:{isOnline}}));if(isOnline){console.log('🌐 連接到網絡');}else{console.log('🔌 離線模式');}};// 初始檢查\nupdateNetworkStatus();// 監聽在線/離線狀態變化\nwindow.addEventListener('online',updateNetworkStatus);window.addEventListener('offline',updateNetworkStatus);return()=>{window.removeEventListener('online',updateNetworkStatus);window.removeEventListener('offline',updateNetworkStatus);};}","map":{"version":3,"names":["register","navigator","window","addEventListener","swUrl","process","env","PUBLIC_URL","serviceWorker","then","registration","console","log","scope","onupdatefound","installingWorker","installing","onstatechange","state","controller","confirm","location","reload","catch","error","ready","sync","err","unregister","message","checkNetworkStatus","updateNetworkStatus","isOnline","onLine","dispatchEvent","CustomEvent","detail","removeEventListener"],"sources":["C:/Users/wesle/OneDrive - KU Leuven/Desktop/Iceland/my-iceland-trip-website/src/registerServiceWorker.js"],"sourcesContent":["// src/registerServiceWorker.js\r\nexport function register() {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      \r\n      // 註冊服務工作者\r\n      navigator.serviceWorker.register(swUrl)\r\n        .then(registration => {\r\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n          \r\n          // 檢查更新\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            if (installingWorker == null) {\r\n              return;\r\n            }\r\n            \r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // 在這裡，有新版本的服務工作者可用\r\n                  console.log('New content is available and will be used when all tabs for this page are closed.');\r\n                  \r\n                  // 可選：通知用戶有更新\r\n                  if (window.confirm('應用有新版本可用。重新加載以更新？')) {\r\n                    window.location.reload();\r\n                  }\r\n                } else {\r\n                  // 在這裡，所有內容已成功預先緩存\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n      \r\n      // 檢查是否支持後台同步\r\n      if ('SyncManager' in window) {\r\n        navigator.serviceWorker.ready\r\n          .then(registration => {\r\n            // 註冊後台同步任務\r\n            registration.sync.register('sync-data')\r\n              .catch(err => console.log('Background sync registration failed:', err));\r\n          });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n\r\n// 檢查網絡連接狀態\r\nexport function checkNetworkStatus() {\r\n  const updateNetworkStatus = () => {\r\n    const isOnline = navigator.onLine;\r\n    // 派發事件\r\n    window.dispatchEvent(new CustomEvent('network-status-change', { detail: { isOnline } }));\r\n    \r\n    if (isOnline) {\r\n      console.log('🌐 連接到網絡');\r\n    } else {\r\n      console.log('🔌 離線模式');\r\n    }\r\n  };\r\n  \r\n  // 初始檢查\r\n  updateNetworkStatus();\r\n  \r\n  // 監聽在線/離線狀態變化\r\n  window.addEventListener('online', updateNetworkStatus);\r\n  window.addEventListener('offline', updateNetworkStatus);\r\n  \r\n  return () => {\r\n    window.removeEventListener('online', updateNetworkStatus);\r\n    window.removeEventListener('offline', updateNetworkStatus);\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}